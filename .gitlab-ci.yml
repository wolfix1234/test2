stages:
  - build
  - build-docker
  - deploy

variables:
  # Docker configuration
  DOCKER_IMAGE: registry.musictomak.shop/root/test2
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  
  # Registry credentials (set your actual values here)
  CI_REGISTRY: musictomak.shop
  CI_REGISTRY_USER: root
  CI_REGISTRY_PASSWORD: glpat-OS-I0Gzqvex48Q2DpMMpTG86MQp1OjEH.01.0w0ajei0l  # ← Replace with your PAT
  
  # Kubernetes configuration
  K8S_NAMESPACE: mamad
  K8S_DEPLOYMENT: nextjs-app
  K8S_CONTAINER: nextjs-app
  
  # Docker-in-Docker configuration - FIXED TLS SETTINGS
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: ""  # ← EMPTY STRING DISABLES TLS
  DOCKER_TLS_VERIFY: "0"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

build:nextjs:
  stage: build
  image: node:18-alpine
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - .next/
      - public/
    expire_in: 1 week

build:docker:
  stage: build-docker
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  script:
    - |
      # Wait for Docker daemon to be ready
      echo "Waiting for Docker daemon to start..."
      sleep 5
      
      # Debug: Check what certificates exist
      echo "Checking certificate directory..."
      ls -la /certs/ || echo "No certs directory"
      
      # Test Docker connection WITHOUT TLS first
      echo "Testing Docker connection..."
      DOCKER_TLS_VERIFY=0 docker info || echo "Docker info failed, trying without TLS..."
      
      # Force no TLS for all commands
      export DOCKER_TLS_VERIFY=0
      export DOCKER_CERT_PATH=""
      
      # Test again
      echo "Testing with TLS disabled..."
      docker info
      
      # Login to container registry
      echo "Logging into container registry..."
      echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      
      # Build Docker image
      echo "Building Docker image..."
      docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
      
      # Push Docker image
      echo "Pushing Docker image to registry..."
      docker push $DOCKER_IMAGE:$DOCKER_TAG
      
      echo "Docker build and push completed successfully!"
  only:
    - main
  needs: ["build:nextjs"]

deploy:production:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - |
      # Update Kubernetes deployment with new image
      echo "Deploying to Kubernetes..."
      kubectl set image deployment/$K8S_DEPLOYMENT $K8S_CONTAINER=$DOCKER_IMAGE:$DOCKER_TAG -n $K8S_NAMESPACE
      
      # Wait for rollout to complete
      echo "Waiting for deployment rollout..."
      kubectl rollout status deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE --timeout=300s
      
      # Verify deployment
      echo "Verifying deployment..."
      kubectl get pods -n $K8S_NAMESPACE -l app=$K8S_DEPLOYMENT
      
      echo "Deployment completed successfully!"
  only:
    - main
  needs: ["build:docker"]