stages:
  - build
  - docker
  - deploy

variables:
  APP_NAME: nextjs-app
  REGISTRY_URL: registry.musictomak.shop
  DOCKER_IMAGE: $REGISTRY_URL/root/test2
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  K8S_NAMESPACE: production
  K8S_DEPLOYMENT: $APP_NAME
  K8S_CONTAINER: $APP_NAME

  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/
  policy: pull-push

# 1. Build Next.js app
build:
  stage: build
  image: node:18-alpine
  script:
    - npm ci --prefer-offline --audit=false
    - npm run build
  artifacts:
    paths:
      - .next/
      - public/
      - package.json
      - package-lock.json
    expire_in: 1h
  only:
    - main

# 2. Build & Push Docker Image
docker-build:
  stage: docker
  image: docker:24
  services:
    - docker:24-dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $REGISTRY_URL -u "$CI_REGISTRY_USER" --password-stdin
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main

# 3. Deploy to Kubernetes (first deploy + updates)
deploy:
  stage: deploy
  image: registry.k8s.io/kubectl:v1.30.2
  script:
    - echo "$KUBECONFIG_DATA" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - |
      # Create namespace if missing
      kubectl get ns $K8S_NAMESPACE || kubectl create ns $K8S_NAMESPACE
    - |
      # Create imagePullSecret if missing
      kubectl get secret regcred -n $K8S_NAMESPACE || \
      kubectl create secret docker-registry regcred \
        --docker-server=$REGISTRY_URL \
        --docker-username=$CI_REGISTRY_USER \
        --docker-password=$CI_REGISTRY_PASSWORD \
        -n $K8S_NAMESPACE
    - |
      # Apply manifest if first deploy
      if ! kubectl get deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE; then
        kubectl apply -f k8s/manifest.yaml
      fi
    - |
      # Update container image for rollout
      kubectl set image deployment/$K8S_DEPLOYMENT $K8S_CONTAINER=$DOCKER_IMAGE:$DOCKER_TAG -n $K8S_NAMESPACE
      kubectl rollout status deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE --timeout=300s
      kubectl get pods -n $K8S_NAMESPACE -l app=$K8S_DEPLOYMENT
  only:
    - main
