stages:
  - build
  - docker
  # - scan
  - deploy

variables:
  APP_NAME: nextjs-app
  # DOCKER_IMAGE: musictomak.shop/root/test2
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  K8S_NAMESPACE: mamad
  K8S_DEPLOYMENT: $APP_NAME
  K8S_CONTAINER: $APP_NAME

  # Required for DinD
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
    # cache image ref (used by buildx)
  # DOCKER_CACHE_IMAGE: $DOCKER_IMAGE:build-cache

# Cache for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/
  policy: pull-push

# 1. Build Next.js app
build:
  stage: build
  image: node:18-alpine
  script:
    - npm ci --prefer-offline --audit=false
    - npm run build
  artifacts:
    paths:
      - .next/
      - public/
      - package.json
      - package-lock.json
    expire_in: 1h
  only:
    - main
    - staging
    - tags

# Build & Push Docker Image
docker-build:
  stage: docker
  image: docker:24
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "=== DOCKER BUILD ==="
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
    - docker push $DOCKER_IMAGE:latest
  only:
    - main

# Deploy with kubectl
deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - echo "=== DEPLOY TO K8S ==="
    - echo "$KUBECONFIG_DATA" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - kubectl set image deployment/$K8S_DEPLOYMENT $K8S_CONTAINER=$DOCKER_IMAGE:$DOCKER_TAG -n $K8S_NAMESPACE
    - kubectl rollout status deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE --timeout=300s
    - kubectl get pods -n $K8S_NAMESPACE -l app=$K8S_DEPLOYMENT
  only:
    - main













# 2. Build & push Docker image with DinD
# debug-docker:
#   stage: docker
#   image: docker:24
#   services:
#     - docker:24-dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375/
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - docker --version
#     - docker info
#     - docker run --rm hello-world


# docker with cache approach
# docker:
#   stage: docker
#   image: docker:24
#   services:
#     - name: docker:24-dind
#       alias: docker
#   variables:
#     # ensure buildx uses the right host
#     DOCKER_BUILDKIT: "1"
#   before_script:
#     - echo "Logging into registry..."
#     - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

#     # ensure buildx is available and create a builder instance
#     - docker buildx version || (echo "buildx not found" && exit 1)
#     - |
#       # create a builder (if not exists) and use it
#       docker buildx create --name ci-builder --use --driver docker-container || true
#     - docker buildx inspect --bootstrap

#     # attempt to pull cache image so it can be used as --cache-from (ignore errors)
#     - |
#       echo "Pulling cache image (if exists): $DOCKER_CACHE_IMAGE"
#       docker pull $DOCKER_CACHE_IMAGE || echo "No cache image yet, continuing..."

#   script:
#     - echo "Building with buildx and using registry cache..."
#     - |
#       docker buildx build \
#         --builder ci-builder \
#         --progress plain \
#         --tag $DOCKER_IMAGE:$DOCKER_TAG \
#         --tag $DOCKER_IMAGE:$CI_COMMIT_REF_NAME \
#         --cache-from=type=registry,ref=$DOCKER_CACHE_IMAGE \
#         --cache-to=type=registry,ref=$DOCKER_CACHE_IMAGE,mode=max \
#         --push \
#         $CI_PROJECT_DIR

#   needs: ["build"]
#   only:
#     - main
#     - staging
#     - tags