stages:
  - build
  - test
  - docker
  - deploy

variables:
  # Application configuration
  APP_NAME: nextjs-app
  DOCKER_IMAGE: musictomak.shop/root/test2
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  
  # Kubernetes configuration
  K8S_NAMESPACE: mamad
  K8S_DEPLOYMENT: $APP_NAME
  K8S_CONTAINER: $APP_NAME

# Cache dependencies for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/
  policy: pull-push

# Build Next.js application
build:
  stage: build
  image: node:18-alpine
  script:
    - echo "Installing dependencies..."
    - npm ci --prefer-offline --audit=false
    - echo "Building application..."
    - npm run build
    - echo "Build completed successfully!"
  artifacts:
    paths:
      - .next/
      - public/
      - package.json
      - package-lock.json
    expire_in: 1 hour
  only:
    - main

# Run tests (optional - uncomment when ready)
# test:
#   stage: test
#   image: node:18-alpine
#   script:
#     - npm ci --prefer-offline --audit=false
#     - npm run test
#   needs: ["build"]
#   only:
#     - main

# Build and push Docker image
docker:
  stage: docker
  image: docker:24
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  script:
    - |
      echo "=== DOCKER BUILD STAGE ==="
      
      # Secure registry login
      echo "Logging into container registry..."
      echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      
      # Build Docker image
      echo "Building Docker image: $DOCKER_IMAGE:$DOCKER_TAG"
      docker build -t $DOCKER_IMAGE:$DOCKER_TAG -t $DOCKER_IMAGE:latest .
      
      # Push Docker image
      echo "Pushing image to registry..."
      docker push $DOCKER_IMAGE:$DOCKER_TAG
      docker push $DOCKER_IMAGE:latest
      
      echo "Docker image pushed successfully!"
  needs: ["build"]
  only:
    - main

# Deploy to Kubernetes
deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - |
      echo "=== DEPLOYMENT STAGE ==="
      
      # Update deployment with new image
      echo "Updating deployment: $K8S_DEPLOYMENT"
      kubectl set image deployment/$K8S_DEPLOYMENT $K8S_CONTAINER=$DOCKER_IMAGE:$DOCKER_TAG -n $K8S_NAMESPACE
      
      # Wait for rollout to complete
      echo "Waiting for rollout to finish..."
      kubectl rollout status deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE --timeout=300s
      
      # Verify deployment
      echo "Verifying deployment status..."
      kubectl get deployments -n $K8S_NAMESPACE
      kubectl get pods -n $K8S_NAMESPACE -l app=$K8S_DEPLOYMENT
      
      echo "Deployment completed successfully!"
  needs: ["docker"]
  only:
    - main` use all the think plain